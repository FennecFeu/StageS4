module Vertex

  (* The type related to the vertices of the graph *)
  type vertex

  clone export set.SetApp with type elt = vertex
  
  (* Predicate on vertex that belongs to the set or not *)
  let predicate vertex_in (x: vertex) (s: set) 
  ensures {result = mem x s}
  =
    mem x s
  
  (* Predicate to verify equality between two vertices *)
  let predicate vertex_eq (x y: vertex)
  ensures {result = (x = y)}
  =
    (singleton x) == (singleton y)
  
  predicate disjoint_vertices (s1 s2: set) =
    is_empty (inter s1 s2)
    
  predicate is_union_vertices_without (s s1 s2 sw: set) =
    s = diff (union s1 s2) sw
  
end

module Edge

  use Vertex

  (* The type related to the elements in an edge *)
  type edge_elt
  (* The type related to the edges of the graph *)
  type edge = (vertex, edge_elt, vertex)
  
  (* Function to get an edge_elt from an edge *)
  let function get_edge_elt edge : edge_elt
  =
  
    let (_, elt, _) = edge in
    elt
  
  (* Function to get the first vertex from an edge *)
  let function get_edge_pred edge : vertex
  =
    let (pred, _, _) = edge in
    pred
    
  (* Function to get the first vertex from an edge *)
  let function get_edge_succ edge : vertex
  =
    let (_, _, succ) = edge in
    succ
    
  (* Predicate to determine if two vertices can be the extremities of an edge *)
  let predicate correct_extremities (u v: vertex) (e: edge) : bool
  ensures {result = ((get_edge_pred e = u) /\ (get_edge_succ e = v))}
  =
    (vertex_eq (get_edge_pred e) u) && (vertex_eq (get_edge_succ e) v)
    
  (* Predicate to determine if two edges has at least one different extremity *)
  predicate distinct_extremities (e f: edge) =
    not get_edge_pred e = get_edge_pred f \/ not get_edge_succ e = get_edge_succ f
  
  clone export set.SetApp with type elt = edge
    
  (* Predicate to determine if the edge belongs to the given set *)
  let predicate edge_in (e: edge) (s: set)
  ensures {result = mem e s}
  =
    mem e s
  
  (* Predicate to determine if a set has an edge with correct extremities *)
  predicate has_edge_set (u v: vertex) (s: set) =
    exists e: edge. edge_in e s /\ correct_extremities u v e
    
  (* Predicate to determine if a set has only one edge with the same extremities *)  
  predicate extremities_primary_key (s: set) =
    forall e f: edge. (edge_in e s /\ edge_in f s) -> e = f \/ distinct_extremities e f
  
end
  

module Graph
  
  use int.Int
  use Vertex
  use Edge
  
  clone export fmap.MapApp with type key = vertex
  
  (* The type of the successors and predecessors map in the graph *)
  type linked = t Vertex.set
  
  (* Predicate to say a set of vertices is the domain of a map *)
  predicate vertices_is_domain (s: Vertex.set) (m: linked) =
    forall v. vertex_in v s <-> mem v m
    
  (* Predicate to say the values of the map are included in the set s *)
  predicate values_subset_of (m: linked) (s: Vertex.set) =
    forall v. mem v m -> subset (find v m) s
  
  (* Predicate to say that two maps acts like a mirror for two vertices *)
  predicate mirror_between_maps_two_vertices (v w: vertex) (m1 m2: linked) =
    vertex_in w (find v m1) <-> vertex_in v (find w m2)
  
  (* Predicate to say that two maps acts like a mirror for two vertices *)
  predicate mirror_between_maps (m1 m2: linked) =
    forall v w. mem v m1 -> mirror_between_maps_two_vertices v w m1 m2
  
  (* Predicate to determine if one of the element returned by the find is actually succ *)
  predicate find_vertex (pred succ: vertex) (m: linked) =
    vertex_in succ (find pred m)
    
  (* Predicate to link edge set and linked map *)
  predicate edge_means_link (s: Edge.set) (m: linked) =
    forall e: edge. (Edge.mem e s -> find_vertex (get_edge_pred e) (get_edge_succ e) m)
  
  (* Predicate to determine if a linked map has all its matching in a set of edges *)
  predicate link_means_edge (m: linked) (s: Edge.set) =
    forall u v: vertex. mem u m /\ find_vertex u v m -> has_edge_set u v s
    
  (* Predicate to determine if a set has all his edges with two different extremities *)
  predicate all_different_extremities (s: Edge.set) =
    forall e: edge. Edge.mem e s -> get_edge_succ e <> get_edge_pred e
  
  (* The type related to the graph *)
  type graph = {vertices : Vertex.set;
                preds : linked;
                succs : linked;
                edges : Edge.set; }
  (* All vertices are keys in preds *)
  invariant {vertices_is_domain vertices preds}
  (* All vertices are keys in succs *)
  invariant {vertices_is_domain vertices succs}
  (* Predecessors are vertices *)
  invariant {values_subset_of preds vertices}
  (* Successors are vertices *)
  invariant {values_subset_of succs vertices}
  (* Relation between predecessors and successors *)
  invariant {mirror_between_maps preds succs}
  (* A graph can't have two edges with same extremities *)
  invariant {extremities_primary_key edges}
  (* An edge means one vertex is the successor of the other edge *)
  invariant {edge_means_link edges succs}
  (* If a vertex has a successor, then there is an edge between those two vertices *)
  invariant {link_means_edge succs edges}
  (* A graph can't have an edge that links a vertex with itself *)
  invariant {all_different_extremities edges}
  by {vertices = Vertex.empty(); preds = create(); succs = create(); edges = empty()}
  
  (* Function to get all the successors of the vertex in the graph *)
  let function successors (v: vertex) (g: graph) : Vertex.set
  requires {vertex_in v g.vertices}
  ensures  {result = find v g.succs}
  =
    find v g.succs
  
  (* Function to get all the predecessors of the vertex in the graph *)
  let function predecessors (v: vertex) (g: graph) : Vertex.set
  requires {vertex_in v g.vertices}
  ensures  {result = find v g.preds}
  =
    find v g.preds
    
  let predicate has_edge_graph (u v: vertex) (g: graph) : bool
  requires {vertex_in u g.vertices}
  ensures {result = find_vertex u v g.succs}
  =
    (vertex_in v (successors u g))
    
  lemma eq_has_edge:
    forall g: graph. forall u v: vertex.
    vertex_in u g.vertices -> (has_edge_graph u v g <-> has_edge_set u v g.edges)
  
  (* Predicate to determine if two vertices are linked by an edge in a graph *)
  predicate connected (u v: vertex) (g: graph) =
    has_edge_graph u v g \/ has_edge_graph v u g
    
  lemma connected_symmetry:
    forall u v: vertex. forall g: graph. connected u v g <-> connected v u g
  
  (* Function to get an edge from the two nodes at its extremities *)
  let function find_edge (u v: vertex) (g: graph) : edge
  requires {vertex_in u g.vertices}
  requires {has_edge_graph u v g}
  ensures  {Edge.mem result g.edges}
  ensures  {correct_extremities u v result}
  =
    (* Auxiliary function to choose an edge and verify if the edge is valid or not *)
    let rec compare_edge (s: Edge.set) : edge
    variant  {cardinal s}
    requires {Edge.subset s g.edges}
    requires {has_edge_set u v s}
    ensures  {Edge.mem result g.edges}
    ensures  {correct_extremities u v result}
    =
    let e = choose s in
    let new_set = Edge.remove e s in
    if correct_extremities u v e then e
    else compare_edge new_set
    in
    compare_edge g.edges
    
  (*
  (* Predicate to make the clone export *)
  predicate edge_exists (x y: vertex) = mem (get_edge x y) (union bridges links)

  clone export graph.Path with type vertex = vertex, predicate edge = edge_exists
  *)
  
  (* Function to obtain the number of predecessors and successors of the vertex in the graph *)
  let function incidence_number (v: vertex) (g: graph) : int
  requires {vertex_in v g.vertices}
  ensures  {result = cardinal (find v g.succs) + cardinal (find v g.preds)}
  =
    cardinal (find v g.succs) + cardinal (find v g.preds)
    
  (* Predicate that establish an order between the vertices in a graph *)
  let predicate order (x y: vertex) (g: graph) : bool
  requires {vertex_in x g.vertices}
  requires {vertex_in y g.vertices}
  ensures  {result = (incidence_number x g >= incidence_number y g)}
  =
    incidence_number x g >= incidence_number y g
  
  (* The order must be reflexive *)
  lemma order_reflexivity:
    forall g: graph. forall x: vertex. Vertex.mem x g.vertices -> order x x g
    
  (* The order must be transitive *)
  lemma order_transitivity:
    forall g: graph. forall x y z: vertex.
    vertex_in x g.vertices /\ vertex_in y g.vertices /\ vertex_in z g.vertices
    /\ order x y g /\ order y z g -> order x z g
  
  (* Predicate to determine if the given vertex is a local optimum *)
  predicate is_local_optimum (opt: vertex) (g: graph) (s: Vertex.fset vertex) =
    forall v: vertex. Vertex.mem v s -> order opt v g
  
  (* Predicate to determine if the given vertex is an optimum *)
  predicate is_optimum (opt: vertex) (g: graph) =
    is_local_optimum opt g g.vertices
    
  (* Function to obtain the optimum vertex in a graph (it will be exploited to start our algorithm) *)
  let function optimum_vertex (g: graph) : vertex
  requires {not Vertex.is_empty g.vertices}
  ensures  {vertex_in result g.vertices}
  ensures  {is_optimum result g}
  =
    (* Auxiliary function in order to make the recursion to verify the vertex we stock is the optimum *)
    let rec compare_optimum (x: vertex) (s: Vertex.set) : vertex
    variant  {cardinal s} (* We remove vertices from the set possible candidate to be the optimum *)
    requires {vertex_in x g.vertices}
    requires {Vertex.subset s g.vertices} 
    requires {is_local_optimum x g (Vertex.diff g.vertices s)} (* x is the local optimum *)
    ensures  {vertex_in result g.vertices}
    ensures  {is_optimum result g}
    =
      if is_empty s then x
      else let y = Vertex.choose s in
      let new_set = Vertex.remove y s in
      if order x y g then compare_optimum x new_set
      else let _ = assert {order y x g} in
      compare_optimum y new_set
    in
    let x = Vertex.choose g.vertices in
    let s = Vertex.remove x g.vertices in
    compare_optimum x s
      
end


module Path

  use Vertex
  use Edge
  use Graph
  
  use int.Int
  use seq.Seq
  
  (* Predicate to determine if two vertices are connected in a graph with a sequence of vertices s *)
  predicate has_path (v1: vertex) (s: seq vertex) (v2: vertex) (g: graph) =
    if length s = 0 then v1 = v2 /\ vertex_in v1 g.vertices
    else connected v1 s[0] g /\ s[length s - 1] = v2 /\
    (forall i. 0 <= i < length s-1 -> connected s[i] s[i+1] g)
  
  (* Predicate to determine if two vertices are connected in a graph *)
  predicate reachable (v1 v2: vertex) (g: graph) =
    exists s. has_path v1 s v2 g
  
  (* A vertex has a path to itself *)
  lemma has_path_itself:
    forall g: graph. forall v: vertex. vertex_in v g.vertices -> has_path v empty v g
  
  (* Reflexivity of relation reachable *)
  lemma reachable_reflexivity:
    forall g: graph. forall v: vertex. vertex_in v g.vertices -> reachable v v g
    
  lemma equiv_seq_sym:
    forall s1 s2: seq vertex. length s1 = length s2 ->
    ((forall i. 0 <= i < length s1 - 1 -> s1[i] = s2[length s1 - 2 - i])
    <-> (forall i. 0 <= i < length s1 - 1 -> s2[i] = s1[length s1 - 2 - i]))
    
  lemma has_path_symmetry:
    forall g: graph. forall v1 v2: vertex. forall s1 s2: seq vertex.
    length s1 = length s2 /\(forall i. 0 <= i < length s1 - 1 -> s1[i] = s2[length s1 - 2 - i])
    /\ s1[length s1 - 1] = v2 /\ s2[length s1 -1] = v1
    -> has_path v1 s1 v2 g <-> has_path v2 s2 v1 g
    
  lemma test:
    forall g: graph. forall v1 v2: vertex. exists s. has_path v1 s v2 g -> exists s2. has_path v2 s2 v1 g
  
  lemma test2:
    forall g: graph. forall v1 v2: vertex.
    reachable v1 v2 g -> exists s. has_path v1 s v2 g
    
  lemma test3:
    forall g: graph. forall v1 v2: vertex. vertex_in v1 g.vertices /\ v1 = v2 -> has_path v1 empty v2 g
    
    
  (* Symmetry of relation reachable *)
  lemma reachable_symmetry:
    forall g: graph. forall v1 v2: vertex. reachable v1 v2 g -> reachable v2 v1 g
  
  (* Transitivity of relation reachable *)
  lemma reachable_transitivity:
    forall g: graph. forall v1 v2 v3: vertex. reachable v1 v2 g /\ reachable v2 v3 g
    -> reachable v1 v3 g
    
  predicate linked_graph (g: graph) =
    forall v1 v2: vertex. vertex_in v1 g.vertices /\ vertex_in v2 g.vertices
    -> reachable v1 v2 g
  
end

    
module Matching

  use Vertex
  use Edge
  use Graph
  use Path

  (* In order to build result *)
  clone export fmap.MapApp with type key = vertex
  
  (* Elements in the result set *)
  type matching = t vertex
  
  predicate is_value_in (a: vertex) (m: matching) =
    exists n: vertex. mapsto n a m
  
  predicate is_range (s: Vertex.set) (m: matching) =
    forall a: vertex. vertex_in a s <-> is_value_in a m
  
end

module States

  use Vertex
  use Edge
  use Graph
  use Path
  use Matching
  
  (* State to register the step in the algorithm on the query graph *)
  type qstate =
    {n_seen : Vertex.set;
     n_seen_succ : Vertex.set;
     n_seen_pred : Vertex.set;}
  invariant {disjoint_vertices n_seen n_seen_succ}
  invariant {disjoint_vertices n_seen n_seen_pred}
  by {n_seen = Vertex.empty(); n_seen_pred = Vertex.empty(); n_seen_succ = Vertex.empty()}
     
  (* Function to create an empty qstate *)
  let function empty_qstate () : qstate
  ensures {Vertex.is_empty result.n_seen}
  ensures {Vertex.is_empty result.n_seen_succ}
  ensures {Vertex.is_empty result.n_seen_pred}
  =
    {n_seen = Vertex.empty();
     n_seen_succ = Vertex.empty();
     n_seen_pred = Vertex.empty();}
  
  (* State to register the step in the algorithm on the data graph *)
  type gstate =
    {matching_peers : Matching.matching;
     a_seen : Vertex.set;
     a_seen_succ : Vertex.set;
     a_seen_pred : Vertex.set;
     a_next : Vertex.set;}
  invariant {is_range a_seen matching_peers}
  invariant {disjoint_vertices a_seen a_seen_succ}
  invariant {disjoint_vertices a_seen a_seen_pred}
  by {matching_peers = create(); a_seen = Vertex.empty(); a_seen_pred = Vertex.empty(); a_seen_succ = Vertex.empty(); a_next = Vertex.empty()}
  
  (* Function to create an empty gstate *)
  let function empty_gstate () : gstate
  ensures {Matching.is_empty result.matching_peers}
  ensures {Vertex.is_empty result.a_seen}
  ensures {Vertex.is_empty result.a_seen_succ}
  ensures {Vertex.is_empty result.a_seen_pred}
  ensures {Vertex.is_empty result.a_next}
  =
    {matching_peers = Matching.create();
     a_seen = Vertex.empty();
     a_seen_succ = Vertex.empty();
     a_seen_pred = Vertex.empty();
     a_next = Vertex.empty();}
     
  let function get_matching_peers (g_state: gstate)
  ensures {result = g_state.matching_peers}
  =
    g_state.matching_peers
     
  (* Function to add a peering in the g_state, and make the needed modification *)
  let function add_peering_g (g: graph) (n a: vertex) (s: gstate) : gstate
  requires {vertex_in a g.vertices}
  requires {not Matching.mem n s.matching_peers}
  requires {forall n. not Matching.mapsto n a s.matching_peers}
  ensures  {result.a_seen = Vertex.add a s.a_seen}
  ensures  {result.matching_peers = Matching.add n a s.matching_peers}
  ensures  {is_union_vertices_without result.a_seen_succ s.a_seen_succ (successors a g) result.a_seen}
  ensures  {is_union_vertices_without result.a_seen_pred s.a_seen_pred (predecessors a g) result.a_seen}
  ensures  {result.a_next = Vertex.union (successors a g) (predecessors a g)}
  =
    let new_a_seen = Vertex.add a s.a_seen in
    let ghost new_matching_peers = Matching.add n a s.matching_peers in
    let _ = assert {forall a1. vertex_in a1 new_a_seen
                    -> (vertex_in a1 s.a_seen /\ exists n1. Matching.mapsto n1 a1 (Matching.add n a s.matching_peers))
                    \/ (a1 = a /\ Matching.mapsto n a1 (Matching.add n a s.matching_peers))} in
    {matching_peers = Matching.add n a s.matching_peers;
     a_seen = new_a_seen;
     a_seen_succ = Vertex.diff (Vertex.union s.a_seen_succ (successors a g)) (new_a_seen);
     a_seen_pred = Vertex.diff (Vertex.union s.a_seen_pred (predecessors a g)) (new_a_seen);
     a_next = Vertex.union (successors a g) (predecessors a g);}
          
  (* Function to add the first peering in the g_state, and make the needed modification *)
  let function create_first_peering_g (g: graph) (opt: vertex) (m: matching): gstate
  requires {Matching.size m = 1}
  requires {Matching.mem opt m}
  requires {vertex_in (Matching.find opt m) g.vertices}
  ensures  {result.a_seen = Vertex.singleton (Matching.find opt m)}
  ensures  {result.matching_peers = m}
  ensures  {result.a_seen_succ = successors (Matching.find opt m) g}
  ensures  {result.a_seen_pred = predecessors (Matching.find opt m) g}
  ensures  {result.a_next = Vertex.union (successors (Matching.find opt m) g) (predecessors (Matching.find opt m) g)}
  =
    let a = Matching.find opt m in
    {matching_peers = m;
     a_seen = Vertex.singleton a;
     a_seen_succ = successors a g;
     a_seen_pred = predecessors a g;
     a_next = Vertex.union (successors a g) (predecessors a g);}
     
     
  (* Function to add the vertex n in the q_state, and make the needed modification *)
  let function add_peering_q (q: graph) (n: vertex) (s: qstate) : qstate
  requires {vertex_in n q.vertices}
  ensures  {result.n_seen = Vertex.add n s.n_seen}
  ensures  {is_union_vertices_without result.n_seen_succ s.n_seen_succ (successors n q) result.n_seen}
  ensures  {is_union_vertices_without result.n_seen_pred s.n_seen_pred (predecessors n q) result.n_seen}
  =
    let new_n_seen = Vertex.add n s.n_seen in
    {n_seen = new_n_seen;
     n_seen_succ = Vertex.diff (Vertex.union s.n_seen_succ (successors n q)) (new_n_seen);
     n_seen_pred = Vertex.diff (Vertex.union s.n_seen_pred (predecessors n q)) (new_n_seen);}
  
  clone export set.SetApp with type elt = gstate
  
  type gstates = set
  
  (* Predicate to determine uniqueness of matching_peers in the set of gstates *)
  predicate matching_peers_uniqueness (g_states: gstates) =
    forall g1 g2. mem g1 g_states /\ mem g2 g_states -> g1 = g2 \/ g1.matching_peers <> g2.matching_peers
  
end

module AlgoGraph
  use int.Int
  use Vertex
  use Edge
  use Graph
  use Path
  use Matching
  use States
  
  clone export set.SetApp with type elt = matching
  
  (* Predicate to say two vertices are similar *)
  let function is_compatible_vertex (q g: graph) (n a: vertex) : bool
    requires {vertex_in a g.vertices}
    requires {vertex_in n q.vertices}
    ensures  {result = (incidence_number n q <= incidence_number a g)}
  =
    (incidence_number n q <= incidence_number a g) && true (* Temporarily *)
    
  (* Predicate to say two edges are similar *)
  let function is_compatible_edge (q g: graph) (l b: edge) : bool
    requires {edge_in b q.edges}
    requires {edge_in l g.edges}
    ensures  {result = true}
  =
    true
  
  (* Function to associate a node and an atom in a matching with one element *)
  let function start_matching (q g: graph) (n a: vertex) : matching
    requires {vertex_in a g.vertices}
    requires {vertex_in n q.vertices}
    ensures  {result = (Matching.add n a Matching.empty)}
  =
    Matching.add n a (create ())
  
  (* Predicate to determine if couples in ms are correct starting matching from s *)
  predicate is_partial_compatible_matching (ms: set) (q g: graph) (opt: vertex) (s: Vertex.fset vertex) =
    ms == map (start_matching q g opt) (filter s (is_compatible_vertex q g opt))
  
  (* Predicate to determine if couples in ms are correct starting matching from the graph g *)
  predicate is_complete_compatible_matching (ms: set) (q g: graph) (opt: vertex) =
    is_partial_compatible_matching ms q g opt g.vertices
      
  (* Function to create the set all_starts in the main algorithm *)
  let function create_all_starts (q g: graph) (opt: vertex) : set
  requires {vertex_in opt q.vertices}
  ensures  {is_complete_compatible_matching result q g opt}
  =
    let rec create_rec (vertices: Vertex.set) (partial_starts: set) : set
    variant  {Vertex.cardinal vertices}
    requires {Vertex.subset vertices g.vertices}
    requires {is_partial_compatible_matching partial_starts q g opt (Vertex.diff g.vertices vertices)}
    ensures  {is_complete_compatible_matching result q g opt}
    =
      if Vertex.is_empty vertices then partial_starts
      else let a = Vertex.choose vertices in
      let new_set = Vertex.remove a vertices in
      let new_starts = if is_compatible_vertex q g opt a then add (start_matching q g opt a) partial_starts
                       else partial_starts in
      create_rec new_set new_starts
    in
    create_rec g.vertices (empty())
    
  (* Predicate to determine if gstates in gs are states built with only opt in matching_peers domain *)
  predicate is_singletons_gstate (gs: gstates) (g: graph) (opt: vertex) (s: fset matching) =
    gs = map (create_first_peering_g g opt) s
  
  (* Function to create the initial set of states in the graph g *)
  let function create_g_states (q g: graph) (opt: vertex) (all_starts: set) : States.set
  requires {vertex_in opt q.vertices}
  requires {all_starts = create_all_starts q g opt}
  ensures  {matching_peers_uniqueness result}
  ensures  {is_singletons_gstate result g opt all_starts}
  =
    let rec create_rec (partial_gs: gstates) (s: set) : gstates
    variant  {cardinal s}
    requires {subset s all_starts}
    requires {forall gst. States.mem gst partial_gs -> mem gst.matching_peers (diff all_starts s)}
    requires {matching_peers_uniqueness partial_gs}
    requires {is_singletons_gstate partial_gs g opt (diff all_starts s)}
    ensures  {is_singletons_gstate result g opt all_starts}
    ensures  {matching_peers_uniqueness result}
    =
      if is_empty s then partial_gs
      else let m = choose s in
      let new_s = remove m s in
      let g_state = create_first_peering_g g opt m in
      let new_gs = States.add g_state partial_gs in
      create_rec new_gs new_s
    in
    create_rec (States.empty()) all_starts
  
  (* Function to remove n in the two adjacent sets of a qstate *)
  let function q_remove_adj (n: vertex) (q_state: qstate) : qstate
  ensures {result.n_seen_succ = Vertex.remove n q_state.n_seen_succ}
  ensures {result.n_seen_pred = Vertex.remove n q_state.n_seen_pred}
  ensures {result.n_seen = q_state.n_seen}
  =
    {q_state with n_seen_succ = Vertex.remove n q_state.n_seen_succ;
                  n_seen_pred = Vertex.remove n q_state.n_seen_pred;
    }
  
  (* Function to remove a in the two adjacent sets of a gstate *)
  let function g_remove_adj (a: vertex) (g_state: gstate) : gstate
  ensures {result.a_seen_succ = Vertex.remove a g_state.a_seen_succ}
  ensures {result.a_seen_pred = Vertex.remove a g_state.a_seen_pred}
  ensures {result.a_seen = g_state.a_seen}
  ensures {result.matching_peers = g_state.matching_peers}
  ensures {result.a_next = g_state.a_next}
  =
    {g_state with a_seen_succ = Vertex.remove a g_state.a_seen_succ;
                  a_seen_pred = Vertex.remove a g_state.a_seen_pred;
    }
  
  (* Predicate to determine if current matchings_done is all the matching peers from the visited gstates *)
  predicate is_partially_extracted (matchings_done: set) (visited_g_states: States.fset gstate) =
    matchings_done = States.map get_matching_peers visited_g_states
  
  (* Predicate to determine if matchings_done is all the matching peers from gstates *)
  predicate is_totally_extracted (g_states: gstates) (matchings_done: set) =
    is_partially_extracted matchings_done g_states
  
  (* Function to extract all the matching peers from a set of gstates *)
  let function extract_matchings (g_states: gstates) : set
  requires {matching_peers_uniqueness g_states}
  ensures  {is_totally_extracted g_states result}
  =
    let rec partial_extract (matchings_done: set) (to_do: gstates)
    variant  {States.cardinal to_do}
    requires {States.subset to_do g_states}
    requires {is_partially_extracted matchings_done (States.diff g_states to_do)}
    ensures  {is_totally_extracted g_states result}
    =
      if States.is_empty to_do then matchings_done
      else let gs = States.choose to_do in
      let new_to_do = States.remove gs to_do in
      let new_matchings_done = add gs.matching_peers matchings_done in
      let _ = assert {forall m. mem m new_matchings_done -> mem m matchings_done \/ m = gs.matching_peers} in
      partial_extract new_matchings_done new_to_do
    in
    partial_extract (empty()) g_states
    
  (* Predicate to determine if two vertices are similar *)
  predicate is_similar_vertex (n a: vertex) =
    a = a /\ n = n /\ true
  
  (* Predicate to determine if two edges are similar *)
  predicate is_similar_edge (e f: edge) =
    e = e /\ f = f /\ true
  
  (* Predicate to determine if matched vertices in the matching are vertices from the graph *)
  predicate is_matched_vertices_in (m: matching) (q g: graph) =
    forall a n: vertex. Matching.mapsto n a m -> vertex_in n q.vertices /\ vertex_in a g.vertices
  
  (* Predicate to determine if all vertices in the query graph are matched in m *)
  predicate is_matched_query_vertices (m: matching) (q: graph) =
    forall n: vertex. vertex_in n q.vertices -> Matching.mem n m
  
  (* Predicate to determine if the matching is bijective *)
  predicate is_bijective (m: matching) =
    forall a a' n n': vertex. Matching.mapsto n a m /\ Matching.mapsto n' a' m
    -> (a = a' /\ n = n') \/ (a <> a' /\ n <> n')
  
  (* Predicate to determine if in a matching, two matched vertices are similar *)
  predicate is_matched_vertices_similar (m: matching) =
    forall a n: vertex. Matching.mapsto n a m -> is_similar_vertex n a
  
  (* Predicate to determine if all edges in the query graph are matched in m *)
  predicate is_matched_query_edges (m: matching) (q g: graph) =
    forall e: edge. Edge.mem e q.edges
    -> has_edge_graph (find (get_edge_pred e) m) (find (get_edge_succ e) m) g
  
  (* Predicate to determine if in a matching, two matched edges are similar *)
  predicate is_matched_edges_similar (m: matching) (q g: graph) =
    forall e: edge. Edge.mem e q.edges
    -> let e' = find_edge (find (get_edge_pred e) m) (find (get_edge_succ e) m) g in
    is_similar_edge e e'
    
  (* Predicate to determine if a matching is a valid subgraph isomorphism *)
  predicate is_valid_matching (m: matching) (q g: graph) =
    is_matched_vertices_in m q g
    /\ is_matched_query_vertices m q
    /\ is_bijective m
    /\ is_matched_vertices_similar m
    /\ is_matched_query_edges m q g
    /\ is_matched_edges_similar m q g
  
  (* Predicate to determine if all matching in a set are valid *)
  predicate is_valid_result (r: set) (q g: graph) =
    forall m: matching. mem m r -> is_valid_matching m q g
  
  (* Predicate to determine if all valid matching are in the result set *)
  predicate is_all_valid_result (r: set) (q g: graph) =
    forall m: matching. is_valid_matching m q g -> mem m r
    
  (* Filters *)
  
  let predicate is_valid (q_state: qstate) (g_state: gstate) (n a: vertex) : bool
  =
    true (* Temporarly *)
  
  (* THE ALMIGHTY ALGORITHM *)
  
  (* Function that build from a gstate all the gstates one step further in the algorithm *)
  let add_new_g_states (q g: graph) (q_state: qstate) (n: vertex) (g_state: gstate) (to_return: States.set) : States.set
  requires {linked_graph q}
  =
    let rec partial_add (a_to_try: Vertex.set) (acc: States.set) : States.set
    variant {Vertex.cardinal a_to_try}
    =
      if Vertex.is_empty a_to_try then acc
      else let a = Vertex.choose a_to_try in
      let new_a_to_try = Vertex.remove a a_to_try in
      if not (is_compatible_vertex q g n a) then partial_add new_a_to_try acc
      else let tmp_g_state = g_remove_adj a g_state in
      if not (is_valid q_state tmp_g_state n a) then partial_add new_a_to_try acc
      else let new_g_state = add_peering_g g n a tmp_g_state in
      let new_acc = States.add new_g_state acc in
      partial_add new_a_to_try new_acc
    in
    partial_add g_state.a_next to_return
  
  (* Function that scans all to_check states in order to add in to_return new gstates one step further in the algorithm *)
  let rec forall_g_states (q g: graph) (q_state: qstate) (n: vertex) (to_check: States.set) (to_return: States.set) : States.set
  requires {linked_graph q}
  variant {States.cardinal to_check}
  =
    if States.is_empty to_check then to_return
    else let g_state = States.choose to_check in
    let new_to_check = States.remove g_state to_check in
    let new_to_return = add_new_g_states q g q_state n g_state to_return in
    forall_g_states q g q_state n new_to_check new_to_return
  
  (* The recurrence of the main algorithm *)
  let rec partial_match (q g: graph) (q_state: qstate) (g_states: States.set) (n_next: Vertex.set) : (qstate, gstates)
  requires {linked_graph q}
  variant {(Vertex.cardinal q.vertices) - (Vertex.cardinal q_state.n_seen)}
  =
    if States.is_empty g_states || is_empty n_next then (q_state, g_states)
    else let n = Vertex.choose n_next in
    let new_n_next = Vertex.remove n n_next in
    if vertex_in n q_state.n_seen then partial_match q g q_state g_states new_n_next
    else let upd_q_state = q_remove_adj n q_state in
    let new_g_states = forall_g_states q g upd_q_state n g_states (States.empty()) in
    let new_q_state = add_peering_q q n upd_q_state in
    let dfs_n_next = Vertex.union (successors n q) (predecessors n q) in
    let (dfs_q_state, dfs_g_states) = partial_match q g new_q_state new_g_states dfs_n_next in
    partial_match q g dfs_q_state dfs_g_states new_n_next
  
  (* The main algorithm *)
  let find_matched_pattern (q g: graph) : set
  requires {linked_graph q}
  ensures  {is_valid_result result q g}
  ensures  {is_all_valid_result result q g}
  =
    if is_empty q.vertices then empty()
    else let opt = optimum_vertex q in
    let all_starts = create_all_starts q g opt in
    let g_states = create_g_states q g opt all_starts in
    let q_state = add_peering_q q opt (empty_qstate()) in
    let n_next = Vertex.union q_state.n_seen_succ q_state.n_seen_pred in
    let (end_q_state, end_g_states) = partial_match q g q_state g_states n_next in
    extract_matchings g_states

end
